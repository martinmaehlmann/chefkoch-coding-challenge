// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/todo.go

// Package handler_mock is a generated GoMock package.
package handler_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	todo "gitlab.com/m.maehlmann/chefkoch-coding-challenge/internal/todo"
)

// MockTodoHandler is a mock of TodoHandler interface.
type MockTodoHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTodoHandlerMockRecorder
}

// MockTodoHandlerMockRecorder is the mock recorder for MockTodoHandler.
type MockTodoHandlerMockRecorder struct {
	mock *MockTodoHandler
}

// NewMockTodoHandler creates a new mock instance.
func NewMockTodoHandler(ctrl *gomock.Controller) *MockTodoHandler {
	mock := &MockTodoHandler{ctrl: ctrl}
	mock.recorder = &MockTodoHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoHandler) EXPECT() *MockTodoHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoHandler) Create(bodyData []byte) (*todo.Todo, *todo.HandlerError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", bodyData)
	ret0, _ := ret[0].(*todo.Todo)
	ret1, _ := ret[1].(*todo.HandlerError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoHandlerMockRecorder) Create(bodyData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoHandler)(nil).Create), bodyData)
}

// Delete mocks base method.
func (m *MockTodoHandler) Delete(id string) *todo.HandlerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*todo.HandlerError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoHandlerMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoHandler)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockTodoHandler) Find(id string) (*todo.Todo, *todo.HandlerError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*todo.Todo)
	ret1, _ := ret[1].(*todo.HandlerError)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTodoHandlerMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTodoHandler)(nil).Find), id)
}

// FindAll mocks base method.
func (m *MockTodoHandler) FindAll() []*todo.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*todo.Todo)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTodoHandlerMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTodoHandler)(nil).FindAll))
}

// Update mocks base method.
func (m *MockTodoHandler) Update(bodyData []byte, id string) (*todo.Todo, *todo.HandlerError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", bodyData, id)
	ret0, _ := ret[0].(*todo.Todo)
	ret1, _ := ret[1].(*todo.HandlerError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTodoHandlerMockRecorder) Update(bodyData, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoHandler)(nil).Update), bodyData, id)
}
